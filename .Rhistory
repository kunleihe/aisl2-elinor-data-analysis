discrimination_problematic <- ifelse(discrimination < 0.2, "problematic", "satisfactory")
# 4. Combine the two problems (either difficulty or discrimination is problematic)
overall_problematic <- ifelse(difficulty_problematic == "problematic" | discrimination_problematic == "problematic",
"problematic", "satisfactory")
# 5. Store results in the pre-allocated dataframe
df_Delayed109_Psy$difficulty[i] <- difficulty
df_Delayed109_Psy$discrimination[i] <- discrimination
df_Delayed109_Psy$difficulty_problematic[i] <- difficulty_problematic
df_Delayed109_Psy$discrimination_problematic[i] <- discrimination_problematic
df_Delayed109_Psy$overall_problematic[i] <- overall_problematic
}
library(dplyr)
# Raw score downloaded from Qualtrics
df_RawPost117 = read.csv("raw_data/raw_post_117.csv")
df_RawDelayed117 = read.csv("raw_data/raw_delayed_post_117.csv")
# Manual Score
df_Post117Manual = read.csv("raw_data/post_117_manual.csv")
df_Delayed117Manual = read.csv("raw_data/delayed_117_manual.csv")
# Tracker
df_Tracker = read.csv("clean_data/tracker.csv")
# remove unuseful columns
df_Post117 = df_RawPost117[, -c(2:17)]
# remove first two rows
df_Post117 = df_Post117[-c(1:2), ]
# get the id. Notice the id and ra names are mixed in some cases
df_Post117$id = ifelse(df_Post117$Intro_4 %in% c(3000:4000), df_Post117$Intro_4, df_Post117$Intro_5)
# get the ra initials
df_Post117$ra = ifelse(is.na(as.numeric(as.character(df_Post117$Intro_4))), df_Post117$Intro_4, df_Post117$Intro_5)
# get rid of intro_4 and intro_5
df_Post117 = df_Post117 %>% dplyr::select(-Intro_4, -Intro_5)
# rearrange columns
df_Post117 = df_Post117 %>% dplyr::select(id, ra, everything())
# remove testing ids
df_Post117 = df_Post117 %>%  filter(id %in% c(3000:4000))
# find elements in df_Post117$id that are NOT present in df_Tracker$id
diffID = df_Post117$id[!df_Post117$id %in% df_Tracker$id]
print(paste("id in df_Post117 but not in tracker:", diffID)) # checked with Kelsy and should be changed to 3453
# change the id 3441 to 3453
df_Post117$id[df_Post117$id == 3441] = 3453
df_Delayed117 = df_RawDelayed117[, -c(2:17)]
# remove first two rows
df_Delayed117 = df_Delayed117[-c(1:2), ]
# get the id. Notice the id and ra names are mixed in some cases
df_Delayed117$id = ifelse(df_Delayed117$Intro_4 %in% c(3000:4000), df_Delayed117$Intro_4, df_Delayed117$Intro_5)
# get the ra initials
df_Delayed117$ra = ifelse(is.na(as.numeric(as.character(df_Delayed117$Intro_4))), df_Delayed117$Intro_4, df_Delayed117$Intro_5)
# get rid of intro_4 and intro_5
df_Delayed117 = df_Delayed117 %>% dplyr::select(-Intro_4, -Intro_5)
# rearrange columns
df_Delayed117 = df_Delayed117 %>% dplyr::select(id, ra, everything())
# remove testing ids
df_Delayed117 = df_Delayed117 %>%  filter(id %in% c(3000:4000))
# find elements in df_Post117$id that are NOT present in df_Tracker$id
diffID = as.numeric(df_Delayed117$id[!df_Delayed117$id %in% df_Tracker$id])
print(diffID)
# set up column names for both data frames for 117
colNames117 = c("id", "ra", "start_date",
# q1
"q1_soccer_init_choice", "q1_soccer_init_text",
"q1_soccer_rpt_choice", "q1_soccer_rpt_text",
# q2
"q2_lucky_init_choice", "q2_lucky_init_text",
"q2_lucky_rpt_choice", "q2_lucky_rpt_text",
# q3
"q3_shirt_init_choice", "q3_shirt_init_text",
"q3_shirt_rpt_choice", "q3_shirt_rpt_text",
# q4
"q4_diff_cr",
# q5
"q5a_flaky_init_choice", "q5a_flaky_init_text",
"q5b_shiny_init_choice", "q5b_shiny_init_text",
# q6
"q6_smell_init_choice", "q6_smell_init_text",
"q6_smell_rpt_choice", "q6_smell_rpt_text",
# q7
"q7_flick_init_choice", "q7_flick_init_text",
"q7_flick_rpt_choice", "q7_flick_rpt_text",
# q8
"q8_tight_init_choice", "q8_tight_init_text",
"q8_tight_rpt_choice", "q8_tight_rpt_text",
# q9
"q9_two_init_choice", "q9_two_init_text",
"q9_two_rpt_choice", "q9_two_rpt_text",
# q10
"q10_book_init_choice", "q10_book_init_text",
"q10_book_rpt_choice", "q10_book_rpt_text",
# q11
"q11_skin_init_choice", "q11_skin_init_text",
"q11_skin_rpt_choice", "q11_skin_rpt_text",
# q12
"q12_mom_init_choice", "q12_mom_init_text",
"q12_mom_rpt_choice", "q12_mom_rpt_text",
# q13
"q13_lose_init_choice", "q13_lose_init_text",
"q13_lose_rpt_choice", "q13_lose_rpt_text",
# q14
"q14_return_init_choice", "q14_return_init_text",
"q14_return_rpt_choice", "q14_return_rpt_text",
# q15
"q15_grasshopper_cr", "notes"
)
# rename
colnames(df_Post117) = colNames117
colnames(df_Delayed117) = colNames117
# convert id to be numeric
df_Post117$id = as.numeric(df_Post117$id)
df_Delayed117$id = as.numeric(df_Delayed117$id)
dupRows_Post117 <- df_Post117 %>%
group_by(id) %>%
filter(n() > 1) %>%
ungroup()
print(dupRows_Post117)
# 3368, 3718 with later dates should be moved to delayed
## find out rows with later dates that needs to be moved to delayed post-test
rowsToMoveToDelayed <- df_Post117 %>%
filter(duplicated(id, fromLast = FALSE))
## sort by 'id' and 'start_date' in ascending order
df_Post117 <- df_Post117 %>%
arrange(id, start_date)
## remove duplicate ids by keeping the first occurrence
df_Post117 <- df_Post117 %>%
filter(!duplicated(id))
## append the later rows to 'df_Delayed117'
df_Delayed117 <- bind_rows(df_Delayed117, rowsToMoveToDelayed)
# Sanity check duplicated rows again
dupRows_Post117 <- df_Post117 %>%
group_by(id) %>%
filter(n() > 1) %>%
ungroup()
print(dupRows_Post117)
dupRows_Delayed117 <- df_Delayed117 %>%
group_by(id) %>%
filter(n() > 1) %>%
ungroup()
print(dupRows_Delayed117)
# 3411 Samantha should be removed
df_Delayed117 = df_Delayed117 %>% filter(!(id==3411 & ra == "Samantha"))
# 3425 KH should be 3426
df_Delayed117 = df_Delayed117 %>%
mutate(id = if_else(id == 3425 & ra == "KH", 3426, id))
# 3411, 3430 and 3278 with earlier dates should be removed (RA already re-entered it to df_Post107)
## Identify the rows with ids 3430 and 3278 with the earliest dates
rowsToMoveToPost <- df_Delayed117 %>%
filter(id %in% c(3411, 3430, 3278)) %>%
group_by(id) %>%
slice_min(order_by = start_date) %>%
ungroup()
# remove these rows from df_Delayed117
df_Delayed117 <- df_Delayed117 %>%
anti_join(rowsToMoveToPost, by = c("id", "start_date"))
# Sanity check duplicated rows again
dupRows_Delayed117 <- df_Delayed117 %>%
group_by(id) %>%
filter(n() > 1) %>%
ungroup()
print(dupRows_Delayed117)
## if q1_soccer_init_choice contains "soccer", q1_soccer_init_score = 2
## if not, check if q1_soccer_init_text contains "soccer", if so, q1_soccer_init_score = 2
## for rest of the cases, q1_soccer_init_score = 0
## if q1_soccer_rpt_choice contains "soccer", q1_soccer_rpt_score = 1
## if not, check if q1_soccer_rpt_text contains "soccer", if so, q1_soccer_rpt_score = 1
## for rest of the cases, q1_soccer_rpt_score = 0
Func_q1_soccer_score <- function(df) {
df$q1_soccer_init_score = ifelse(grepl("soccer", df$q1_soccer_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("soccer", df$q1_soccer_init_text, ignore.case = TRUE), 2, 0))
df$q1_soccer_rpt_score = ifelse(grepl("soccer", df$q1_soccer_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("soccer", df$q1_soccer_rpt_text, ignore.case = TRUE), 1, 0))
df$q1_soccer_rpt_score = ifelse(df$q1_soccer_init_score == 2, 0, df$q1_soccer_rpt_score)
df$q1_soccer_score = df$q1_soccer_init_score + df$q1_soccer_rpt_score
print(paste("The range of q1_soccer_score is:",
min(df$q1_soccer_score, na.rm = TRUE), "to",
max(df$q1_soccer_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q1_soccer_score(df_Post117)
df_Delayed117 <- Func_q1_soccer_score(df_Delayed117)
# This item was not constructive but was manually scored
## In df_Post117Manual, if p117_q2_score == 2, then in df_Post117$q2_lucky_init_score = 2, otherwise 0
## In df_Post117Manual, if p117_q2_score == 1, then in df_Post117$q2_lucky_rpt_score = 1, otherwise 0
## In df_Delayed117Manual, if d117_q2_score == 2, then in df_Delayed117$q2_lucky_init_score = 2, otherwise 0
## In df_Delayed117Manual, if d117_q2_score == 1, then in df_Delayed117$q2_lucky_rpt_score = 1, otherwise 0
#########################
## Immediate post-test###
#########################
df_Post117 <- df_Post117 %>%
left_join(df_Post117Manual[c("id", "p117_q2_score")], by = "id") %>%
mutate(
q2_lucky_init_score = ifelse(p117_q2_score == 2, 2, 0),
q2_lucky_rpt_score = ifelse(p117_q2_score == 1, 1, 0)
)
df_Post117 <- df_Post117 %>% select(-p117_q2_score)
df_Post117$q2_lucky_score = df_Post117$q2_lucky_init_score + df_Post117$q2_lucky_rpt_score
print(paste("In immediate post-test, the range of q2_shirt_score is:",
min(df_Post117$q2_lucky_init_score, na.rm = TRUE), "to",
max(df_Post117$q2_lucky_init_score, na.rm = TRUE)))
########################
## Delayed post-test###
#######################
df_Delayed117 <- df_Delayed117 %>%
left_join(df_Delayed117Manual[c("id", "d117_q2_score")], by = "id") %>%
mutate(
q2_lucky_init_score = ifelse(d117_q2_score == 2, 2, 0),
q2_lucky_rpt_score = ifelse(d117_q2_score == 1, 1, 0)
)
df_Delayed117 <- df_Delayed117 %>% select(-d117_q2_score)
df_Delayed117$q2_lucky_score = df_Delayed117$q2_lucky_init_score + df_Delayed117$q2_lucky_rpt_score
print(paste("In delayed post-test, the range of q2_shirt_score is:",
min(df_Delayed117$q2_lucky_init_score, na.rm = TRUE), "to",
max(df_Delayed117$q2_lucky_init_score, na.rm = TRUE)))
## if q3_shirt_init_choice contains "tight", q3_shirt_init_score = 2
## if q3_shirt_init_choice does not contains "tight", check if q3_shirt_init_text contains "tight" or "small"
## if q3_shirt_init_text contains "tight" or "small", q3_shirt_init_score = 2
## for rest of the cases, q1_soccer_init_score = 0
Func_q3_shirt_score <- function(df) {
df$q3_shirt_init_score = ifelse(grepl("tight", df$q3_shirt_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("tight|small", df$q3_shirt_init_choice, ignore.case = TRUE), 2, 0))
df$q3_shirt_rpt_score = ifelse(grepl("tight", df$q3_shirt_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("tight|small", df$q3_shirt_rpt_text, ignore.case = TRUE), 1, 0))
df$q3_shirt_rpt_score = ifelse(df$q3_shirt_init_score == 2, 0, df$q3_shirt_rpt_score)
df$q3_shirt_score = df$q3_shirt_init_score + df$q3_shirt_rpt_score
print(paste("The range of q1_soccer_score is:",
min(df$q3_shirt_score, na.rm = TRUE), "to",
max(df$q3_shirt_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q3_shirt_score(df_Post117)
df_Delayed117 <- Func_q3_shirt_score(df_Delayed117)
## This item was a constructive item and manually scored
## merge the manual score to the data frame and rename it as q4_diff_cr_score
#########################
## Immediate post-test###
#########################
df_Post117 <- df_Post117 %>%
left_join(df_Post117Manual[c("id", "p117_q4_cr_score")], by = "id") %>%
mutate(q4_diff_cr_score = p117_q4_cr_score) %>%
select(-p117_q4_cr_score)
print(paste("In immediate post-test, the range of q4_diff_cr_score is:",
min(df_Post117$q4_diff_cr_score, na.rm = TRUE), "to",
max(df_Post117$q4_diff_cr_score, na.rm = TRUE)))
########################
## Delayed post-test###
#######################
df_Delayed117 <- df_Delayed117 %>%
left_join(df_Delayed117Manual[c("id", "d117_q4_cr_score")], by = "id") %>%
mutate(q4_diff_cr_score = d117_q4_cr_score) %>%
select(-d117_q4_cr_score)
print(paste("In delayed post-test, the range of q4_diff_cr_score is:",
min(df_Delayed117$q4_diff_cr_score, na.rm = TRUE), "to",
max(df_Delayed117$q4_diff_cr_score, na.rm = TRUE)))
Func_q5_wall_score <- function(df) {
df$q5a_flaky_init_score = ifelse(grepl("b", df$q5a_flaky_init_choice, ignore.case = TRUE), 1,
ifelse(grepl("soccer", df$q5a_flaky_init_text, ignore.case = TRUE), 1, 0))
df$q5b_shiny_init_score = ifelse(grepl("d", df$q5b_shiny_init_choice, ignore.case = TRUE), 1,
ifelse(grepl("soccer", df$q5b_shiny_init_text, ignore.case = TRUE), 1, 0))
df$q5_wall_score = df$q5a_flaky_init_score + df$q5b_shiny_init_score
print(paste("The range of q5_wall_score is:",
min(df$q5_wall_score, na.rm = TRUE), "to",
max(df$q5_wall_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q5_wall_score(df_Post117)
df_Delayed117 <- Func_q5_wall_score(df_Delayed117)
Func_q6_smell_score <- function(df) {
df$q6_smell_init_score = ifelse(grepl("tongue", df$q6_smell_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("tongue", df$q6_smell_init_choice, ignore.case = TRUE), 2, 0))
df$q6_smell_rpt_score = ifelse(grepl("tongue", df$q6_smell_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("tongue", df$q6_smell_rpt_text, ignore.case = TRUE), 1, 0))
df$q6_smell_rpt_score = ifelse(df$q6_smell_init_score == 2, 0, df$q6_smell_rpt_score)
df$q6_smell_score = df$q6_smell_init_score + df$q6_smell_rpt_score
print(paste("The range of q6_smell_score is:",
min(df$q6_smell_score, na.rm = TRUE), "to",
max(df$q6_smell_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q6_smell_score(df_Post117)
df_Delayed117 <- Func_q6_smell_score(df_Delayed117)
Func_q7_flick_score <- function(df) {
df$q7_flick_init_score = ifelse(grepl("smell", df$q7_flick_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("smell", df$q7_flick_init_text, ignore.case = TRUE), 2, 0))
df$q7_flick_rpt_score = ifelse(grepl("smell", df$q7_flick_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("smell", df$q7_flick_rpt_text, ignore.case = TRUE), 1, 0))
df$q7_flick_rpt_score = ifelse(df$q7_flick_init_score == 2, 0, df$q7_flick_rpt_score)
df$q7_flick_score = df$q7_flick_init_score + df$q7_flick_rpt_score
print(paste("The range of q7_flick_score is:",
min(df$q7_flick_score, na.rm = TRUE), "to",
max(df$q7_flick_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q7_flick_score(df_Post117)
df_Delayed117 <- Func_q7_flick_score(df_Delayed117)
Func_q8_tight_score <- function(df) {
df$q8_tight_init_score = ifelse(grepl("miss", df$q8_tight_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("miss", df$q8_tight_init_text, ignore.case = TRUE), 2, 0))
df$q8_tight_rpt_score = ifelse(grepl("miss", df$q8_tight_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("miss", df$q8_tight_rpt_text, ignore.case = TRUE), 1, 0))
df$q8_tight_rpt_score = ifelse(df$q8_tight_init_score == 2, 0, df$q8_tight_rpt_score)
df$q8_tight_score = df$q8_tight_init_score + df$q8_tight_rpt_score
print(paste("The range of q8_tight_score is:",
min(df$q8_tight_score, na.rm = TRUE), "to",
max(df$q8_tight_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q8_tight_score(df_Post117)
df_Delayed117 <- Func_q8_tight_score(df_Delayed117)
# init_score scored manually
#########################
## Immediate post-test###
#########################
df_Post117 <- df_Post117 %>%
left_join(df_Post117Manual[c("id", "p117_q9_init_score")], by = "id") %>%
mutate(q9_two_init_score = p117_q9_init_score) %>%
select(-p117_q9_init_score)
########################
## Delayed post-test###
#######################
df_Delayed117 <- df_Delayed117 %>%
left_join(df_Delayed117Manual[c("id", "d117_q9_init_score")], by = "id") %>%
mutate(q9_two_init_score = d117_q9_init_score) %>%
select(-d117_q9_init_score)
## q9_two_rpt_score
Func_q9_two_rpt_score <- function(df) {
df$q9_two_rpt_score = ifelse(grepl("molt", df$q9_two_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("molt", df$q9_two_rpt_text, ignore.case = TRUE), 1, 0))
# if q9_two_init_score == 2, then df$q9_two_rpt_score = 0
df$q9_two_rpt_score = ifelse(df$q9_two_init_score == 2, 0, df$q9_two_rpt_score)
df$q9_two_score = df$q9_two_init_score + df$q9_two_rpt_score
print(paste("The range of q9_two_score is:",
min(df$q9_two_score, na.rm = TRUE), "to",
max(df$q9_two_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q9_two_rpt_score(df_Post117)
df_Delayed117 <- Func_q9_two_rpt_score(df_Delayed117)
Func_q10_book_score <- function(df) {
df$q10_book_init_score = ifelse(grepl("magnify", df$q10_book_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("magnify", df$q10_book_init_text, ignore.case = TRUE), 2, 0))
df$q10_book_rpt_score = ifelse(grepl("magnify", df$q10_book_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("magnify", df$q10_book_rpt_text, ignore.case = TRUE), 1, 0))
# if q10_book_init_score == 2, then df$q10_book_rpt_score = 0
df$q10_book_rpt_score = ifelse(df$q10_book_init_score == 2, 0, df$q10_book_rpt_score)
df$q10_book_score = df$q10_book_init_score + df$q10_book_rpt_score
print(paste("The range of q10_book_score is:",
min(df$q10_book_score, na.rm = TRUE), "to",
max(df$q10_book_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q10_book_score(df_Post117)
df_Delayed117 <- Func_q10_book_score(df_Delayed117)
Func_q11_skin_score <- function(df) {
df$q11_skin_init_score = ifelse(grepl("molt|shed|fall|fell|off|came|come|coming", df$q11_skin_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("molt|shed|fall|fell|off|came|come|coming", df$q11_skin_init_text, ignore.case = TRUE), 2, 0))
df$q11_skin_rpt_score = ifelse(grepl("molt|shed|fall|fell|off|came|come|coming", df$q11_skin_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("molt|shed|fall|fell|off|came|come|coming", df$q11_skin_rpt_text, ignore.case = TRUE), 1, 0))
# if q11_skin_init_score == 2, then df$q11_skin_rpt_score = 0
df$q11_skin_rpt_score = ifelse(df$q11_skin_init_score == 2, 0, df$q11_skin_rpt_score)
df$q11_skin_score = df$q11_skin_init_score + df$q11_skin_rpt_score
print(paste("The range of q11_skin_score is:",
min(df$q11_skin_score, na.rm = TRUE), "to",
max(df$q11_skin_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q11_skin_score(df_Post117)
df_Delayed117 <- Func_q11_skin_score(df_Delayed117)
Func_q12_mom_score <- function(df) {
df$q12_mom_init_score = ifelse(grepl("molt", df$q12_mom_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("molt", df$q12_mom_init_text, ignore.case = TRUE), 2, 0))
df$q12_mom_rpt_score = ifelse(grepl("molt", df$q12_mom_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("molt", df$q12_mom_rpt_text, ignore.case = TRUE), 1, 0))
# if q12_mom_init_score == 2, then df$q12_mom_rpt_score = 0
df$q12_mom_rpt_score = ifelse(df$q12_mom_init_score == 2, 0, df$q12_mom_rpt_score)
df$q12_mom_score = df$q12_mom_init_score + df$q12_mom_rpt_score
print(paste("The range of q12_mom_score is:",
min(df$q12_mom_score, na.rm = TRUE), "to",
max(df$q12_mom_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q12_mom_score(df_Post117)
df_Delayed117 <- Func_q12_mom_score(df_Delayed117)
Func_q13_lose_score <- function(df) {
df$q13_lose_init_score = ifelse(grepl("grow|grew|tight|small", df$q13_lose_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("grow|grew|tight|small", df$q13_lose_init_text, ignore.case = TRUE), 2, 0))
df$q13_lose_rpt_score = ifelse(grepl("grow|grew|tight|small", df$q13_lose_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("grow|grew|tight|small", df$q13_lose_rpt_text, ignore.case = TRUE), 1, 0))
# if q13_lose_init_score == 2, then df$q13_lose_rpt_score = 0
df$q13_lose_rpt_score = ifelse(df$q13_lose_init_score == 2, 0, df$q13_lose_rpt_score)
df$q13_lose_score = df$q13_lose_init_score + df$q13_lose_rpt_score
print(paste("The range of q13_lose_score is:",
min(df$q13_lose_score, na.rm = TRUE), "to",
max(df$q13_lose_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q13_lose_score(df_Post117)
df_Delayed117 <- Func_q13_lose_score(df_Delayed117)
Func_q14_return_score <- function(df) {
df$q14_return_init_score = ifelse(grepl("forest|wood|jungle", df$q14_return_init_choice, ignore.case = TRUE), 2,
ifelse(grepl("forest|wood|jungle", df$q14_return_init_text, ignore.case = TRUE), 2, 0))
df$q14_return_rpt_score = ifelse(grepl("forest|wood|jungle", df$q14_return_rpt_choice, ignore.case = TRUE), 1,
ifelse(grepl("forest|wood|jungle", df$q14_return_rpt_text, ignore.case = TRUE), 1, 0))
# if q14_return_init_score == 2, then df$q14_return_rpt_score = 0
df$q14_return_rpt_score = ifelse(df$q14_return_init_score == 2, 0, df$q14_return_rpt_score)
df$q14_return_score = df$q14_return_init_score + df$q14_return_rpt_score
print(paste("The range of q14_return_score is:",
min(df$q14_return_score, na.rm = TRUE), "to",
max(df$q14_return_score, na.rm = TRUE)))
return (df)
}
df_Post117 <- Func_q14_return_score(df_Post117)
df_Delayed117 <- Func_q14_return_score(df_Delayed117)
## This item was a constructive item and manuall scored
## merge the manual score to the data frame and rename it as q15_grasshopper_cr_score
#########################
## Immediate post-test###
#########################
df_Post117 <- df_Post117 %>%
left_join(df_Post117Manual[c("id", "p117_q15_cr_score")], by = "id") %>%
mutate(q15_grasshopper_cr_score = p117_q15_cr_score) %>%
select(-p117_q15_cr_score)
print(paste("In immediate post-test, the range of q15_grasshopper_cr_score is:",
min(df_Post117$q15_grasshopper_cr_score, na.rm = TRUE), "to",
max(df_Post117$q15_grasshopper_cr_score, na.rm = TRUE)))
########################
## Delayed post-test###
#######################
df_Delayed117 <- df_Delayed117 %>%
left_join(df_Delayed117Manual[c("id", "d117_q15_cr_score")], by = "id") %>%
mutate(q15_grasshopper_cr_score = d117_q15_cr_score) %>%
select(-d117_q15_cr_score)
print(paste("In delayed post-test, the range of q15_grasshopper_cr_score is:",
min(df_Delayed117$q15_grasshopper_cr_score, na.rm = TRUE), "to",
max(df_Delayed117$q15_grasshopper_cr_score, na.rm = TRUE)))
# Aggregate all the columns that contain init_score to be free_recall_score
df_Post117$p117_init_total_score = rowSums(df_Post117[, grepl("init_score", colnames(df_Post117))], na.rm = TRUE)
# Aggregate all the columns that contain cr_score to be constructive_score
df_Post117$p117_cr_total_score = rowSums(df_Post117[, grepl("cr_score", colnames(df_Post117))], na.rm = TRUE)
# Aggregate all the columns that contain rpt_score to be reprompt_score
df_Post117$p117_rpt_total_score = rowSums(df_Post117[, grepl("rpt_score", colnames(df_Post117))], na.rm = TRUE)
# Aggregate all item score to be total_score
df_Post117$p117_total_score = rowSums(df_Post117[, c("q1_soccer_score", "q2_lucky_score", "q3_shirt_score",
"q4_diff_cr_score", "q5_wall_score", "q6_smell_score", "q7_flick_score",
"q8_tight_score", "q9_two_score", "q10_book_score",
"q11_skin_score", "q12_mom_score", "q13_lose_score",
"q14_return_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Calculate recall and transfer score
## recall items: q1, q2, q3, q4, q6, q7, q8, q9, q12, q13, q14
## transfer items: q5, q10, q11, q15
df_Post117$p117_recall_score = rowSums(df_Post117[, c("q1_soccer_score", "q2_lucky_score", "q3_shirt_score",
"q4_diff_cr_score", "q6_smell_score", "q7_flick_score",
"q8_tight_score", "q9_two_score", "q12_mom_score", "q13_lose_score", "q14_return_score")],
na.rm = TRUE)
df_Post117$p117_transfer_score = rowSums(df_Post117[, c("q5_wall_score", "q10_book_score",
"q11_skin_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Calculate narrative and science score
## narrative items: q1, q2, q8, q14
## science items: q3, q4, q5, q6, q7, q9, q10, q11, q12, q13, q15
df_Post117$p117_narrative_score = rowSums(df_Post117[, c("q1_soccer_score", "q2_lucky_score",
"q8_tight_score", "q14_return_score")],
na.rm = TRUE)
df_Post117$p117_science_score = rowSums(df_Post117[, c("q3_shirt_score", "q4_diff_cr_score", "q5_wall_score",
"q6_smell_score", "q7_flick_score", "q9_two_score",
"q10_book_score", "q11_skin_score", "q12_mom_score",
"q13_lose_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Sanity check
df_Post117$p117_total_score_check = df_Post117$p117_init_total_score + df_Post117$p117_rpt_total_score + df_Post117$p117_cr_total_score
## check if there are rows where total_score and total_score_check are different
print(df_Post117 %>% filter(p117_total_score != p117_total_score_check))
## remove total_score_check column
df_Post117 <- df_Post117 %>% select(-p117_total_score_check)
# Aggregate all the columns that contain init_score to be free_recall_score
df_Delayed117$d117_init_total_score = rowSums(df_Delayed117[, grepl("init_score", colnames(df_Delayed117))], na.rm = TRUE)
# Aggregate all the columns that contain cr_score to be constructive_score
df_Delayed117$d117_cr_total_score = rowSums(df_Delayed117[, grepl("cr_score", colnames(df_Delayed117))], na.rm = TRUE)
# Aggregate all the columns that contain rpt_score to be reprompt_score
df_Delayed117$d117_rpt_total_score = rowSums(df_Delayed117[, grepl("rpt_score", colnames(df_Delayed117))], na.rm = TRUE)
# Aggregate all item score to be total_score
df_Delayed117$d117_total_score = rowSums(df_Delayed117[, c("q1_soccer_score", "q2_lucky_score", "q3_shirt_score",
"q4_diff_cr_score", "q5_wall_score", "q6_smell_score", "q7_flick_score",
"q8_tight_score", "q9_two_score", "q10_book_score",
"q11_skin_score", "q12_mom_score", "q13_lose_score",
"q14_return_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Calculate recall and transfer score
## recall items: q1, q2, q3, q4, q6, q7, q8, q9, q12, q13, q14
## transfer items: q5, q10, q11, q15
df_Delayed117$d117_recall_score = rowSums(df_Delayed117[, c("q1_soccer_score", "q2_lucky_score", "q3_shirt_score",
"q4_diff_cr_score", "q6_smell_score", "q7_flick_score",
"q8_tight_score", "q9_two_score", "q12_mom_score", "q13_lose_score", "q14_return_score")],
na.rm = TRUE)
df_Delayed117$d117_transfer_score = rowSums(df_Delayed117[, c("q5_wall_score", "q10_book_score",
"q11_skin_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Calculate narrative and science score
## narrative items: q1, q2, q8, q14
## science items: q3, q4, q5, q6, q7, q9, q10, q11, q12, q13, q15
df_Delayed117$d117_narrative_score = rowSums(df_Delayed117[, c("q1_soccer_score", "q2_lucky_score",
"q8_tight_score", "q14_return_score")],
na.rm = TRUE)
df_Delayed117$d117_science_score = rowSums(df_Delayed117[, c("q3_shirt_score", "q4_diff_cr_score", "q5_wall_score",
"q6_smell_score", "q7_flick_score", "q9_two_score",
"q10_book_score", "q11_skin_score", "q12_mom_score",
"q13_lose_score", "q15_grasshopper_cr_score")],
na.rm = TRUE)
# Sanity check
df_Delayed117$d117_total_score_check = df_Delayed117$d117_init_total_score + df_Delayed117$d117_rpt_total_score + df_Delayed117$d117_cr_total_score
## check if there are rows where total_score and total_score_check are different
print(df_Delayed117 %>% filter(d117_total_score != d117_total_score_check))
## remove total_score_check column
df_Delayed117 <- df_Delayed117 %>% select(-d117_total_score_check)
write.csv(df_Post117, "clean_data/post_117_scored.csv", row.names = FALSE)
write.csv(df_Delayed117, "clean_data/delayed_117_scored.csv", row.names = FALSE)
